//
// Copyright (c) 2024-present NAVER Corp
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.28.3
// source: pkg/lobster/proto/chunk.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End           *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	Source        *ProtoSource           `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	PodUid        string                 `protobuf:"bytes,4,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty"`
	Container     string                 `protobuf:"bytes,5,opt,name=container,proto3" json:"container,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Request) Reset() {
	*x = Request{}
	mi := &file_pkg_lobster_proto_chunk_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lobster_proto_chunk_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_pkg_lobster_proto_chunk_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Request) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Request) GetSource() *ProtoSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Request) GetPodUid() string {
	if x != nil {
		return x.PodUid
	}
	return ""
}

func (x *Request) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProtoChunk    []*ProtoChunk          `protobuf:"bytes,1,rep,name=ProtoChunk,proto3" json:"ProtoChunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_pkg_lobster_proto_chunk_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lobster_proto_chunk_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_pkg_lobster_proto_chunk_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetProtoChunk() []*ProtoChunk {
	if x != nil {
		return x.ProtoChunk
	}
	return nil
}

type ProtoChunk struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Cluster          string                 `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Namespace        string                 `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels           map[string]string      `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SetName          string                 `protobuf:"bytes,5,opt,name=set_name,json=setName,proto3" json:"set_name,omitempty"`
	Pod              string                 `protobuf:"bytes,6,opt,name=pod,proto3" json:"pod,omitempty"`
	PodUid           string                 `protobuf:"bytes,7,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty"`
	Container        string                 `protobuf:"bytes,8,opt,name=container,proto3" json:"container,omitempty"`
	Source           *ProtoSource           `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
	Blocks           []*ProtoBlock          `protobuf:"bytes,10,rep,name=blocks,proto3" json:"blocks,omitempty"`
	TempBlock        *ProtoTempBlock        `protobuf:"bytes,11,opt,name=temp_block,json=tempBlock,proto3" json:"temp_block,omitempty"`
	StartedAt        *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Line             int64                  `protobuf:"varint,16,opt,name=line,proto3" json:"line,omitempty"`
	Size             int64                  `protobuf:"varint,17,opt,name=size,proto3" json:"size,omitempty"`
	RelativePodDir   string                 `protobuf:"bytes,18,opt,name=relative_pod_dir,json=relativePodDir,proto3" json:"relative_pod_dir,omitempty"`
	RelativeBlockDir string                 `protobuf:"bytes,19,opt,name=relative_block_dir,json=relativeBlockDir,proto3" json:"relative_block_dir,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProtoChunk) Reset() {
	*x = ProtoChunk{}
	mi := &file_pkg_lobster_proto_chunk_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoChunk) ProtoMessage() {}

func (x *ProtoChunk) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lobster_proto_chunk_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoChunk.ProtoReflect.Descriptor instead.
func (*ProtoChunk) Descriptor() ([]byte, []int) {
	return file_pkg_lobster_proto_chunk_proto_rawDescGZIP(), []int{2}
}

func (x *ProtoChunk) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProtoChunk) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ProtoChunk) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ProtoChunk) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ProtoChunk) GetSetName() string {
	if x != nil {
		return x.SetName
	}
	return ""
}

func (x *ProtoChunk) GetPod() string {
	if x != nil {
		return x.Pod
	}
	return ""
}

func (x *ProtoChunk) GetPodUid() string {
	if x != nil {
		return x.PodUid
	}
	return ""
}

func (x *ProtoChunk) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *ProtoChunk) GetSource() *ProtoSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ProtoChunk) GetBlocks() []*ProtoBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *ProtoChunk) GetTempBlock() *ProtoTempBlock {
	if x != nil {
		return x.TempBlock
	}
	return nil
}

func (x *ProtoChunk) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *ProtoChunk) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ProtoChunk) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *ProtoChunk) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ProtoChunk) GetRelativePodDir() string {
	if x != nil {
		return x.RelativePodDir
	}
	return ""
}

func (x *ProtoChunk) GetRelativeBlockDir() string {
	if x != nil {
		return x.RelativeBlockDir
	}
	return ""
}

type ProtoBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	Line          int64                  `protobuf:"varint,3,opt,name=line,proto3" json:"line,omitempty"`
	Size          int64                  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	FileNum       int64                  `protobuf:"varint,5,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoBlock) Reset() {
	*x = ProtoBlock{}
	mi := &file_pkg_lobster_proto_chunk_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBlock) ProtoMessage() {}

func (x *ProtoBlock) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lobster_proto_chunk_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBlock.ProtoReflect.Descriptor instead.
func (*ProtoBlock) Descriptor() ([]byte, []int) {
	return file_pkg_lobster_proto_chunk_proto_rawDescGZIP(), []int{3}
}

func (x *ProtoBlock) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *ProtoBlock) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *ProtoBlock) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *ProtoBlock) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ProtoBlock) GetFileNum() int64 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

type ProtoTempBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	Line          int64                  `protobuf:"varint,3,opt,name=line,proto3" json:"line,omitempty"`
	Size          int64                  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	FileNum       int64                  `protobuf:"varint,5,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoTempBlock) Reset() {
	*x = ProtoTempBlock{}
	mi := &file_pkg_lobster_proto_chunk_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTempBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTempBlock) ProtoMessage() {}

func (x *ProtoTempBlock) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lobster_proto_chunk_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTempBlock.ProtoReflect.Descriptor instead.
func (*ProtoTempBlock) Descriptor() ([]byte, []int) {
	return file_pkg_lobster_proto_chunk_proto_rawDescGZIP(), []int{4}
}

func (x *ProtoTempBlock) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *ProtoTempBlock) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *ProtoTempBlock) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *ProtoTempBlock) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ProtoTempBlock) GetFileNum() int64 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

type ProtoSource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoSource) Reset() {
	*x = ProtoSource{}
	mi := &file_pkg_lobster_proto_chunk_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSource) ProtoMessage() {}

func (x *ProtoSource) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lobster_proto_chunk_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSource.ProtoReflect.Descriptor instead.
func (*ProtoSource) Descriptor() ([]byte, []int) {
	return file_pkg_lobster_proto_chunk_proto_rawDescGZIP(), []int{5}
}

func (x *ProtoSource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProtoSource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_pkg_lobster_proto_chunk_proto protoreflect.FileDescriptor

var file_pkg_lobster_proto_chunk_proto_rawDesc = string([]byte{
	0x0a, 0x1d, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6f, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0xad, 0x05, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6f, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x6f, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x34,
	0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x54, 0x65, 0x6d, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70,
	0x6f, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x64, 0x44, 0x69, 0x72, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xc5, 0x01, 0x0a, 0x0e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x75,
	0x6d, 0x22, 0x35, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x32, 0x78, 0x0a, 0x0c, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x13, 0x5a, 0x11, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x65,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_pkg_lobster_proto_chunk_proto_rawDescOnce sync.Once
	file_pkg_lobster_proto_chunk_proto_rawDescData []byte
)

func file_pkg_lobster_proto_chunk_proto_rawDescGZIP() []byte {
	file_pkg_lobster_proto_chunk_proto_rawDescOnce.Do(func() {
		file_pkg_lobster_proto_chunk_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_lobster_proto_chunk_proto_rawDesc), len(file_pkg_lobster_proto_chunk_proto_rawDesc)))
	})
	return file_pkg_lobster_proto_chunk_proto_rawDescData
}

var file_pkg_lobster_proto_chunk_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_pkg_lobster_proto_chunk_proto_goTypes = []any{
	(*Request)(nil),               // 0: proto.Request
	(*Response)(nil),              // 1: proto.Response
	(*ProtoChunk)(nil),            // 2: proto.ProtoChunk
	(*ProtoBlock)(nil),            // 3: proto.ProtoBlock
	(*ProtoTempBlock)(nil),        // 4: proto.ProtoTempBlock
	(*ProtoSource)(nil),           // 5: proto.ProtoSource
	nil,                           // 6: proto.ProtoChunk.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_pkg_lobster_proto_chunk_proto_depIdxs = []int32{
	7,  // 0: proto.Request.start:type_name -> google.protobuf.Timestamp
	7,  // 1: proto.Request.end:type_name -> google.protobuf.Timestamp
	5,  // 2: proto.Request.source:type_name -> proto.ProtoSource
	2,  // 3: proto.Response.ProtoChunk:type_name -> proto.ProtoChunk
	6,  // 4: proto.ProtoChunk.labels:type_name -> proto.ProtoChunk.LabelsEntry
	5,  // 5: proto.ProtoChunk.source:type_name -> proto.ProtoSource
	3,  // 6: proto.ProtoChunk.blocks:type_name -> proto.ProtoBlock
	4,  // 7: proto.ProtoChunk.temp_block:type_name -> proto.ProtoTempBlock
	7,  // 8: proto.ProtoChunk.started_at:type_name -> google.protobuf.Timestamp
	7,  // 9: proto.ProtoChunk.updated_at:type_name -> google.protobuf.Timestamp
	7,  // 10: proto.ProtoBlock.started_at:type_name -> google.protobuf.Timestamp
	7,  // 11: proto.ProtoBlock.ended_at:type_name -> google.protobuf.Timestamp
	7,  // 12: proto.ProtoTempBlock.started_at:type_name -> google.protobuf.Timestamp
	7,  // 13: proto.ProtoTempBlock.ended_at:type_name -> google.protobuf.Timestamp
	0,  // 14: proto.ChunkService.GetChunksWithinRange:input_type -> proto.Request
	0,  // 15: proto.ChunkService.GetChunk:input_type -> proto.Request
	1,  // 16: proto.ChunkService.GetChunksWithinRange:output_type -> proto.Response
	1,  // 17: proto.ChunkService.GetChunk:output_type -> proto.Response
	16, // [16:18] is the sub-list for method output_type
	14, // [14:16] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_pkg_lobster_proto_chunk_proto_init() }
func file_pkg_lobster_proto_chunk_proto_init() {
	if File_pkg_lobster_proto_chunk_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_lobster_proto_chunk_proto_rawDesc), len(file_pkg_lobster_proto_chunk_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_lobster_proto_chunk_proto_goTypes,
		DependencyIndexes: file_pkg_lobster_proto_chunk_proto_depIdxs,
		MessageInfos:      file_pkg_lobster_proto_chunk_proto_msgTypes,
	}.Build()
	File_pkg_lobster_proto_chunk_proto = out.File
	file_pkg_lobster_proto_chunk_proto_goTypes = nil
	file_pkg_lobster_proto_chunk_proto_depIdxs = nil
}
